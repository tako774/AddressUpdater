//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.18052
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// このソース コードは Microsoft.VSDesigner、バージョン 4.0.30319.18052 によって自動生成されました。
// 
#pragma warning disable 1591

namespace HisoutenSupportTools.AddressUpdater.Lib.AddressService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AddressServicePortBinding", Namespace="http://hisoutenAddressService/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(user))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tournamentUser))]
    public partial class AddressService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback registerHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback unregisterHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearHostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearTournamentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearChatOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAnnouncesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addAnnounceOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAnnounceOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearAnnounceOperationCompleted;
        
        private System.Threading.SendOrPostCallback forceRegisterHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback forceRegisterHostExOperationCompleted;
        
        private System.Threading.SendOrPostCallback forceUnregisterHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback forceUnregisterTournamentOperationCompleted;
        
        private System.Threading.SendOrPostCallback forceSetFightingOperationCompleted;
        
        private System.Threading.SendOrPostCallback addAdminChatOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAddressByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback setEnableRemoteAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback enterOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerHostInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerHostExOperationCompleted;
        
        private System.Threading.SendOrPostCallback setFightingOperationCompleted;
        
        private System.Threading.SendOrPostCallback addChatOperationCompleted;
        
        private System.Threading.SendOrPostCallback addChatExOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTournamentDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerTournamentOperationCompleted;
        
        private System.Threading.SendOrPostCallback unregisterTournamentOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTournamentManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeTournamentManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTournamentDummyPlayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelTournamentEntryByManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTournamentSpectatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeTournamentSpectatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTournamentAnnouncesOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTournamentUserCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback startTournamentOperationCompleted;
        
        private System.Threading.SendOrPostCallback retireTournamentByManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback kickTournamentUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTournamentResultsByManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback entryTournamentOperationCompleted;
        
        private System.Threading.SendOrPostCallback guestEntryTournamentOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelTournamentEntryOperationCompleted;
        
        private System.Threading.SendOrPostCallback retireTournamentOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTournamentPlayerWaitingOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTournamentPlayerFightingOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTournamentResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTournamentChatOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerMatchingOperationCompleted;
        
        private System.Threading.SendOrPostCallback unregisterMatchingOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMatchingHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPreparedOperationCompleted;
        
        private System.Threading.SendOrPostCallback skipMatchingOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMatchingResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDataExOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback leaveOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AddressService() {
            this.Url = global::HisoutenSupportTools.AddressUpdater.Lib.Properties.Settings.Default.AddressUpdaterLib_AddressService_AddressService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event registerHostCompletedEventHandler registerHostCompleted;
        
        /// <remarks/>
        public event unregisterHostCompletedEventHandler unregisterHostCompleted;
        
        /// <remarks/>
        public event getServerVersionCompletedEventHandler getServerVersionCompleted;
        
        /// <remarks/>
        public event getServerSettingCompletedEventHandler getServerSettingCompleted;
        
        /// <remarks/>
        public event getServerSettingsCompletedEventHandler getServerSettingsCompleted;
        
        /// <remarks/>
        public event clearHostsCompletedEventHandler clearHostsCompleted;
        
        /// <remarks/>
        public event clearTournamentsCompletedEventHandler clearTournamentsCompleted;
        
        /// <remarks/>
        public event clearChatCompletedEventHandler clearChatCompleted;
        
        /// <remarks/>
        public event setAnnouncesCompletedEventHandler setAnnouncesCompleted;
        
        /// <remarks/>
        public event addAnnounceCompletedEventHandler addAnnounceCompleted;
        
        /// <remarks/>
        public event removeAnnounceCompletedEventHandler removeAnnounceCompleted;
        
        /// <remarks/>
        public event clearAnnounceCompletedEventHandler clearAnnounceCompleted;
        
        /// <remarks/>
        public event forceRegisterHostCompletedEventHandler forceRegisterHostCompleted;
        
        /// <remarks/>
        public event forceRegisterHostExCompletedEventHandler forceRegisterHostExCompleted;
        
        /// <remarks/>
        public event forceUnregisterHostCompletedEventHandler forceUnregisterHostCompleted;
        
        /// <remarks/>
        public event forceUnregisterTournamentCompletedEventHandler forceUnregisterTournamentCompleted;
        
        /// <remarks/>
        public event forceSetFightingCompletedEventHandler forceSetFightingCompleted;
        
        /// <remarks/>
        public event addAdminChatCompletedEventHandler addAdminChatCompleted;
        
        /// <remarks/>
        public event getAddressByIdCompletedEventHandler getAddressByIdCompleted;
        
        /// <remarks/>
        public event setEnableRemoteAdminCompletedEventHandler setEnableRemoteAdminCompleted;
        
        /// <remarks/>
        public event getUserCountCompletedEventHandler getUserCountCompleted;
        
        /// <remarks/>
        public event enterCompletedEventHandler enterCompleted;
        
        /// <remarks/>
        public event registerHostInformationCompletedEventHandler registerHostInformationCompleted;
        
        /// <remarks/>
        public event registerHostExCompletedEventHandler registerHostExCompleted;
        
        /// <remarks/>
        public event setFightingCompletedEventHandler setFightingCompleted;
        
        /// <remarks/>
        public event addChatCompletedEventHandler addChatCompleted;
        
        /// <remarks/>
        public event addChatExCompletedEventHandler addChatExCompleted;
        
        /// <remarks/>
        public event getTournamentDataCompletedEventHandler getTournamentDataCompleted;
        
        /// <remarks/>
        public event registerTournamentCompletedEventHandler registerTournamentCompleted;
        
        /// <remarks/>
        public event unregisterTournamentCompletedEventHandler unregisterTournamentCompleted;
        
        /// <remarks/>
        public event addTournamentManagerCompletedEventHandler addTournamentManagerCompleted;
        
        /// <remarks/>
        public event removeTournamentManagerCompletedEventHandler removeTournamentManagerCompleted;
        
        /// <remarks/>
        public event addTournamentDummyPlayerCompletedEventHandler addTournamentDummyPlayerCompleted;
        
        /// <remarks/>
        public event cancelTournamentEntryByManagerCompletedEventHandler cancelTournamentEntryByManagerCompleted;
        
        /// <remarks/>
        public event addTournamentSpectatorCompletedEventHandler addTournamentSpectatorCompleted;
        
        /// <remarks/>
        public event removeTournamentSpectatorCompletedEventHandler removeTournamentSpectatorCompleted;
        
        /// <remarks/>
        public event setTournamentAnnouncesCompletedEventHandler setTournamentAnnouncesCompleted;
        
        /// <remarks/>
        public event setTournamentUserCountCompletedEventHandler setTournamentUserCountCompleted;
        
        /// <remarks/>
        public event startTournamentCompletedEventHandler startTournamentCompleted;
        
        /// <remarks/>
        public event retireTournamentByManagerCompletedEventHandler retireTournamentByManagerCompleted;
        
        /// <remarks/>
        public event kickTournamentUserCompletedEventHandler kickTournamentUserCompleted;
        
        /// <remarks/>
        public event setTournamentResultsByManagerCompletedEventHandler setTournamentResultsByManagerCompleted;
        
        /// <remarks/>
        public event entryTournamentCompletedEventHandler entryTournamentCompleted;
        
        /// <remarks/>
        public event guestEntryTournamentCompletedEventHandler guestEntryTournamentCompleted;
        
        /// <remarks/>
        public event cancelTournamentEntryCompletedEventHandler cancelTournamentEntryCompleted;
        
        /// <remarks/>
        public event retireTournamentCompletedEventHandler retireTournamentCompleted;
        
        /// <remarks/>
        public event setTournamentPlayerWaitingCompletedEventHandler setTournamentPlayerWaitingCompleted;
        
        /// <remarks/>
        public event setTournamentPlayerFightingCompletedEventHandler setTournamentPlayerFightingCompleted;
        
        /// <remarks/>
        public event setTournamentResultsCompletedEventHandler setTournamentResultsCompleted;
        
        /// <remarks/>
        public event addTournamentChatCompletedEventHandler addTournamentChatCompleted;
        
        /// <remarks/>
        public event registerMatchingCompletedEventHandler registerMatchingCompleted;
        
        /// <remarks/>
        public event unregisterMatchingCompletedEventHandler unregisterMatchingCompleted;
        
        /// <remarks/>
        public event addMatchingHistoryCompletedEventHandler addMatchingHistoryCompleted;
        
        /// <remarks/>
        public event setPreparedCompletedEventHandler setPreparedCompleted;
        
        /// <remarks/>
        public event skipMatchingCompletedEventHandler skipMatchingCompleted;
        
        /// <remarks/>
        public event getMatchingResultCompletedEventHandler getMatchingResultCompleted;
        
        /// <remarks/>
        public event getAllDataExCompletedEventHandler getAllDataExCompleted;
        
        /// <remarks/>
        public event getAllDataCompletedEventHandler getAllDataCompleted;
        
        /// <remarks/>
        public event leaveCompletedEventHandler leaveCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool registerHost([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ip, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int port, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string rank, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string comment) {
            object[] results = this.Invoke("registerHost", new object[] {
                        ip,
                        port,
                        rank,
                        comment});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void registerHostAsync(string ip, int port, string rank, string comment) {
            this.registerHostAsync(ip, port, rank, comment, null);
        }
        
        /// <remarks/>
        public void registerHostAsync(string ip, int port, string rank, string comment, object userState) {
            if ((this.registerHostOperationCompleted == null)) {
                this.registerHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterHostOperationCompleted);
            }
            this.InvokeAsync("registerHost", new object[] {
                        ip,
                        port,
                        rank,
                        comment}, this.registerHostOperationCompleted, userState);
        }
        
        private void OnregisterHostOperationCompleted(object arg) {
            if ((this.registerHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerHostCompleted(this, new registerHostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void unregisterHost([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ip) {
            this.Invoke("unregisterHost", new object[] {
                        ip});
        }
        
        /// <remarks/>
        public void unregisterHostAsync(string ip) {
            this.unregisterHostAsync(ip, null);
        }
        
        /// <remarks/>
        public void unregisterHostAsync(string ip, object userState) {
            if ((this.unregisterHostOperationCompleted == null)) {
                this.unregisterHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunregisterHostOperationCompleted);
            }
            this.InvokeAsync("unregisterHost", new object[] {
                        ip}, this.unregisterHostOperationCompleted, userState);
        }
        
        private void OnunregisterHostOperationCompleted(object arg) {
            if ((this.unregisterHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unregisterHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getServerVersion() {
            object[] results = this.Invoke("getServerVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getServerVersionAsync() {
            this.getServerVersionAsync(null);
        }
        
        /// <remarks/>
        public void getServerVersionAsync(object userState) {
            if ((this.getServerVersionOperationCompleted == null)) {
                this.getServerVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerVersionOperationCompleted);
            }
            this.InvokeAsync("getServerVersion", new object[0], this.getServerVersionOperationCompleted, userState);
        }
        
        private void OngetServerVersionOperationCompleted(object arg) {
            if ((this.getServerVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerVersionCompleted(this, new getServerVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public serverSetting getServerSetting() {
            object[] results = this.Invoke("getServerSetting", new object[0]);
            return ((serverSetting)(results[0]));
        }
        
        /// <remarks/>
        public void getServerSettingAsync() {
            this.getServerSettingAsync(null);
        }
        
        /// <remarks/>
        public void getServerSettingAsync(object userState) {
            if ((this.getServerSettingOperationCompleted == null)) {
                this.getServerSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerSettingOperationCompleted);
            }
            this.InvokeAsync("getServerSetting", new object[0], this.getServerSettingOperationCompleted, userState);
        }
        
        private void OngetServerSettingOperationCompleted(object arg) {
            if ((this.getServerSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerSettingCompleted(this, new getServerSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] getServerSettings() {
            object[] results = this.Invoke("getServerSettings", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getServerSettingsAsync() {
            this.getServerSettingsAsync(null);
        }
        
        /// <remarks/>
        public void getServerSettingsAsync(object userState) {
            if ((this.getServerSettingsOperationCompleted == null)) {
                this.getServerSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerSettingsOperationCompleted);
            }
            this.InvokeAsync("getServerSettings", new object[0], this.getServerSettingsOperationCompleted, userState);
        }
        
        private void OngetServerSettingsOperationCompleted(object arg) {
            if ((this.getServerSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerSettingsCompleted(this, new getServerSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void clearHosts([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword) {
            this.Invoke("clearHosts", new object[] {
                        keyword});
        }
        
        /// <remarks/>
        public void clearHostsAsync(string keyword) {
            this.clearHostsAsync(keyword, null);
        }
        
        /// <remarks/>
        public void clearHostsAsync(string keyword, object userState) {
            if ((this.clearHostsOperationCompleted == null)) {
                this.clearHostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearHostsOperationCompleted);
            }
            this.InvokeAsync("clearHosts", new object[] {
                        keyword}, this.clearHostsOperationCompleted, userState);
        }
        
        private void OnclearHostsOperationCompleted(object arg) {
            if ((this.clearHostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearHostsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void clearTournaments([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword) {
            this.Invoke("clearTournaments", new object[] {
                        keyword});
        }
        
        /// <remarks/>
        public void clearTournamentsAsync(string keyword) {
            this.clearTournamentsAsync(keyword, null);
        }
        
        /// <remarks/>
        public void clearTournamentsAsync(string keyword, object userState) {
            if ((this.clearTournamentsOperationCompleted == null)) {
                this.clearTournamentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearTournamentsOperationCompleted);
            }
            this.InvokeAsync("clearTournaments", new object[] {
                        keyword}, this.clearTournamentsOperationCompleted, userState);
        }
        
        private void OnclearTournamentsOperationCompleted(object arg) {
            if ((this.clearTournamentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearTournamentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void clearChat([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword) {
            this.Invoke("clearChat", new object[] {
                        keyword});
        }
        
        /// <remarks/>
        public void clearChatAsync(string keyword) {
            this.clearChatAsync(keyword, null);
        }
        
        /// <remarks/>
        public void clearChatAsync(string keyword, object userState) {
            if ((this.clearChatOperationCompleted == null)) {
                this.clearChatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearChatOperationCompleted);
            }
            this.InvokeAsync("clearChat", new object[] {
                        keyword}, this.clearChatOperationCompleted, userState);
        }
        
        private void OnclearChatOperationCompleted(object arg) {
            if ((this.clearChatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearChatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setAnnounces([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute("announces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] announces) {
            this.Invoke("setAnnounces", new object[] {
                        keyword,
                        announces});
        }
        
        /// <remarks/>
        public void setAnnouncesAsync(string keyword, string[] announces) {
            this.setAnnouncesAsync(keyword, announces, null);
        }
        
        /// <remarks/>
        public void setAnnouncesAsync(string keyword, string[] announces, object userState) {
            if ((this.setAnnouncesOperationCompleted == null)) {
                this.setAnnouncesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAnnouncesOperationCompleted);
            }
            this.InvokeAsync("setAnnounces", new object[] {
                        keyword,
                        announces}, this.setAnnouncesOperationCompleted, userState);
        }
        
        private void OnsetAnnouncesOperationCompleted(object arg) {
            if ((this.setAnnouncesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAnnouncesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addAnnounce([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string contents) {
            this.Invoke("addAnnounce", new object[] {
                        keyword,
                        contents});
        }
        
        /// <remarks/>
        public void addAnnounceAsync(string keyword, string contents) {
            this.addAnnounceAsync(keyword, contents, null);
        }
        
        /// <remarks/>
        public void addAnnounceAsync(string keyword, string contents, object userState) {
            if ((this.addAnnounceOperationCompleted == null)) {
                this.addAnnounceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddAnnounceOperationCompleted);
            }
            this.InvokeAsync("addAnnounce", new object[] {
                        keyword,
                        contents}, this.addAnnounceOperationCompleted, userState);
        }
        
        private void OnaddAnnounceOperationCompleted(object arg) {
            if ((this.addAnnounceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addAnnounceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void removeAnnounce([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int number) {
            this.Invoke("removeAnnounce", new object[] {
                        keyword,
                        number});
        }
        
        /// <remarks/>
        public void removeAnnounceAsync(string keyword, int number) {
            this.removeAnnounceAsync(keyword, number, null);
        }
        
        /// <remarks/>
        public void removeAnnounceAsync(string keyword, int number, object userState) {
            if ((this.removeAnnounceOperationCompleted == null)) {
                this.removeAnnounceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAnnounceOperationCompleted);
            }
            this.InvokeAsync("removeAnnounce", new object[] {
                        keyword,
                        number}, this.removeAnnounceOperationCompleted, userState);
        }
        
        private void OnremoveAnnounceOperationCompleted(object arg) {
            if ((this.removeAnnounceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAnnounceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void clearAnnounce([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword) {
            this.Invoke("clearAnnounce", new object[] {
                        keyword});
        }
        
        /// <remarks/>
        public void clearAnnounceAsync(string keyword) {
            this.clearAnnounceAsync(keyword, null);
        }
        
        /// <remarks/>
        public void clearAnnounceAsync(string keyword, object userState) {
            if ((this.clearAnnounceOperationCompleted == null)) {
                this.clearAnnounceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearAnnounceOperationCompleted);
            }
            this.InvokeAsync("clearAnnounce", new object[] {
                        keyword}, this.clearAnnounceOperationCompleted, userState);
        }
        
        private void OnclearAnnounceOperationCompleted(object arg) {
            if ((this.clearAnnounceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearAnnounceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void forceRegisterHost([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ip, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int port, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string rank, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string comment) {
            this.Invoke("forceRegisterHost", new object[] {
                        keyword,
                        ip,
                        port,
                        rank,
                        comment});
        }
        
        /// <remarks/>
        public void forceRegisterHostAsync(string keyword, string ip, int port, string rank, string comment) {
            this.forceRegisterHostAsync(keyword, ip, port, rank, comment, null);
        }
        
        /// <remarks/>
        public void forceRegisterHostAsync(string keyword, string ip, int port, string rank, string comment, object userState) {
            if ((this.forceRegisterHostOperationCompleted == null)) {
                this.forceRegisterHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnforceRegisterHostOperationCompleted);
            }
            this.InvokeAsync("forceRegisterHost", new object[] {
                        keyword,
                        ip,
                        port,
                        rank,
                        comment}, this.forceRegisterHostOperationCompleted, userState);
        }
        
        private void OnforceRegisterHostOperationCompleted(object arg) {
            if ((this.forceRegisterHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.forceRegisterHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void forceRegisterHostEx([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] host host) {
            this.Invoke("forceRegisterHostEx", new object[] {
                        keyword,
                        host});
        }
        
        /// <remarks/>
        public void forceRegisterHostExAsync(string keyword, host host) {
            this.forceRegisterHostExAsync(keyword, host, null);
        }
        
        /// <remarks/>
        public void forceRegisterHostExAsync(string keyword, host host, object userState) {
            if ((this.forceRegisterHostExOperationCompleted == null)) {
                this.forceRegisterHostExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnforceRegisterHostExOperationCompleted);
            }
            this.InvokeAsync("forceRegisterHostEx", new object[] {
                        keyword,
                        host}, this.forceRegisterHostExOperationCompleted, userState);
        }
        
        private void OnforceRegisterHostExOperationCompleted(object arg) {
            if ((this.forceRegisterHostExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.forceRegisterHostExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void forceUnregisterHost([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ip) {
            this.Invoke("forceUnregisterHost", new object[] {
                        keyword,
                        no,
                        ip});
        }
        
        /// <remarks/>
        public void forceUnregisterHostAsync(string keyword, int no, string ip) {
            this.forceUnregisterHostAsync(keyword, no, ip, null);
        }
        
        /// <remarks/>
        public void forceUnregisterHostAsync(string keyword, int no, string ip, object userState) {
            if ((this.forceUnregisterHostOperationCompleted == null)) {
                this.forceUnregisterHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnforceUnregisterHostOperationCompleted);
            }
            this.InvokeAsync("forceUnregisterHost", new object[] {
                        keyword,
                        no,
                        ip}, this.forceUnregisterHostOperationCompleted, userState);
        }
        
        private void OnforceUnregisterHostOperationCompleted(object arg) {
            if ((this.forceUnregisterHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.forceUnregisterHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void forceUnregisterTournament([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no) {
            this.Invoke("forceUnregisterTournament", new object[] {
                        keyword,
                        no});
        }
        
        /// <remarks/>
        public void forceUnregisterTournamentAsync(string keyword, int no) {
            this.forceUnregisterTournamentAsync(keyword, no, null);
        }
        
        /// <remarks/>
        public void forceUnregisterTournamentAsync(string keyword, int no, object userState) {
            if ((this.forceUnregisterTournamentOperationCompleted == null)) {
                this.forceUnregisterTournamentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnforceUnregisterTournamentOperationCompleted);
            }
            this.InvokeAsync("forceUnregisterTournament", new object[] {
                        keyword,
                        no}, this.forceUnregisterTournamentOperationCompleted, userState);
        }
        
        private void OnforceUnregisterTournamentOperationCompleted(object arg) {
            if ((this.forceUnregisterTournamentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.forceUnregisterTournamentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void forceSetFighting([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ip, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool isFighting) {
            this.Invoke("forceSetFighting", new object[] {
                        keyword,
                        no,
                        ip,
                        isFighting});
        }
        
        /// <remarks/>
        public void forceSetFightingAsync(string keyword, int no, string ip, bool isFighting) {
            this.forceSetFightingAsync(keyword, no, ip, isFighting, null);
        }
        
        /// <remarks/>
        public void forceSetFightingAsync(string keyword, int no, string ip, bool isFighting, object userState) {
            if ((this.forceSetFightingOperationCompleted == null)) {
                this.forceSetFightingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnforceSetFightingOperationCompleted);
            }
            this.InvokeAsync("forceSetFighting", new object[] {
                        keyword,
                        no,
                        ip,
                        isFighting}, this.forceSetFightingOperationCompleted, userState);
        }
        
        private void OnforceSetFightingOperationCompleted(object arg) {
            if ((this.forceSetFightingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.forceSetFightingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addAdminChat([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string contents) {
            this.Invoke("addAdminChat", new object[] {
                        keyword,
                        contents});
        }
        
        /// <remarks/>
        public void addAdminChatAsync(string keyword, string contents) {
            this.addAdminChatAsync(keyword, contents, null);
        }
        
        /// <remarks/>
        public void addAdminChatAsync(string keyword, string contents, object userState) {
            if ((this.addAdminChatOperationCompleted == null)) {
                this.addAdminChatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddAdminChatOperationCompleted);
            }
            this.InvokeAsync("addAdminChat", new object[] {
                        keyword,
                        contents}, this.addAdminChatOperationCompleted, userState);
        }
        
        private void OnaddAdminChatOperationCompleted(object arg) {
            if ((this.addAdminChatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addAdminChatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getAddressById([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id) {
            object[] results = this.Invoke("getAddressById", new object[] {
                        keyword,
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAddressByIdAsync(string keyword, string id) {
            this.getAddressByIdAsync(keyword, id, null);
        }
        
        /// <remarks/>
        public void getAddressByIdAsync(string keyword, string id, object userState) {
            if ((this.getAddressByIdOperationCompleted == null)) {
                this.getAddressByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAddressByIdOperationCompleted);
            }
            this.InvokeAsync("getAddressById", new object[] {
                        keyword,
                        id}, this.getAddressByIdOperationCompleted, userState);
        }
        
        private void OngetAddressByIdOperationCompleted(object arg) {
            if ((this.getAddressByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAddressByIdCompleted(this, new getAddressByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setEnableRemoteAdmin([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyword, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool enable) {
            this.Invoke("setEnableRemoteAdmin", new object[] {
                        keyword,
                        enable});
        }
        
        /// <remarks/>
        public void setEnableRemoteAdminAsync(string keyword, bool enable) {
            this.setEnableRemoteAdminAsync(keyword, enable, null);
        }
        
        /// <remarks/>
        public void setEnableRemoteAdminAsync(string keyword, bool enable, object userState) {
            if ((this.setEnableRemoteAdminOperationCompleted == null)) {
                this.setEnableRemoteAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetEnableRemoteAdminOperationCompleted);
            }
            this.InvokeAsync("setEnableRemoteAdmin", new object[] {
                        keyword,
                        enable}, this.setEnableRemoteAdminOperationCompleted, userState);
        }
        
        private void OnsetEnableRemoteAdminOperationCompleted(object arg) {
            if ((this.setEnableRemoteAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setEnableRemoteAdminCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int getUserCount() {
            object[] results = this.Invoke("getUserCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getUserCountAsync() {
            this.getUserCountAsync(null);
        }
        
        /// <remarks/>
        public void getUserCountAsync(object userState) {
            if ((this.getUserCountOperationCompleted == null)) {
                this.getUserCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserCountOperationCompleted);
            }
            this.InvokeAsync("getUserCount", new object[0], this.getUserCountOperationCompleted, userState);
        }
        
        private void OngetUserCountOperationCompleted(object arg) {
            if ((this.getUserCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserCountCompleted(this, new getUserCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void enter() {
            this.Invoke("enter", new object[0]);
        }
        
        /// <remarks/>
        public void enterAsync() {
            this.enterAsync(null);
        }
        
        /// <remarks/>
        public void enterAsync(object userState) {
            if ((this.enterOperationCompleted == null)) {
                this.enterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnenterOperationCompleted);
            }
            this.InvokeAsync("enter", new object[0], this.enterOperationCompleted, userState);
        }
        
        private void OnenterOperationCompleted(object arg) {
            if ((this.enterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.enterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void registerHostInformation([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ip, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int port, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string rank, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string comment) {
            this.Invoke("registerHostInformation", new object[] {
                        ip,
                        port,
                        rank,
                        comment});
        }
        
        /// <remarks/>
        public void registerHostInformationAsync(string ip, int port, string rank, string comment) {
            this.registerHostInformationAsync(ip, port, rank, comment, null);
        }
        
        /// <remarks/>
        public void registerHostInformationAsync(string ip, int port, string rank, string comment, object userState) {
            if ((this.registerHostInformationOperationCompleted == null)) {
                this.registerHostInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterHostInformationOperationCompleted);
            }
            this.InvokeAsync("registerHostInformation", new object[] {
                        ip,
                        port,
                        rank,
                        comment}, this.registerHostInformationOperationCompleted, userState);
        }
        
        private void OnregisterHostInformationOperationCompleted(object arg) {
            if ((this.registerHostInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerHostInformationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void registerHostEx([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] host host) {
            this.Invoke("registerHostEx", new object[] {
                        host});
        }
        
        /// <remarks/>
        public void registerHostExAsync(host host) {
            this.registerHostExAsync(host, null);
        }
        
        /// <remarks/>
        public void registerHostExAsync(host host, object userState) {
            if ((this.registerHostExOperationCompleted == null)) {
                this.registerHostExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterHostExOperationCompleted);
            }
            this.InvokeAsync("registerHostEx", new object[] {
                        host}, this.registerHostExOperationCompleted, userState);
        }
        
        private void OnregisterHostExOperationCompleted(object arg) {
            if ((this.registerHostExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerHostExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setFighting([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ip, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool isFighting) {
            this.Invoke("setFighting", new object[] {
                        ip,
                        isFighting});
        }
        
        /// <remarks/>
        public void setFightingAsync(string ip, bool isFighting) {
            this.setFightingAsync(ip, isFighting, null);
        }
        
        /// <remarks/>
        public void setFightingAsync(string ip, bool isFighting, object userState) {
            if ((this.setFightingOperationCompleted == null)) {
                this.setFightingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetFightingOperationCompleted);
            }
            this.InvokeAsync("setFighting", new object[] {
                        ip,
                        isFighting}, this.setFightingOperationCompleted, userState);
        }
        
        private void OnsetFightingOperationCompleted(object arg) {
            if ((this.setFightingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setFightingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addChat([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string contents) {
            this.Invoke("addChat", new object[] {
                        contents});
        }
        
        /// <remarks/>
        public void addChatAsync(string contents) {
            this.addChatAsync(contents, null);
        }
        
        /// <remarks/>
        public void addChatAsync(string contents, object userState) {
            if ((this.addChatOperationCompleted == null)) {
                this.addChatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddChatOperationCompleted);
            }
            this.InvokeAsync("addChat", new object[] {
                        contents}, this.addChatOperationCompleted, userState);
        }
        
        private void OnaddChatOperationCompleted(object arg) {
            if ((this.addChatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addChatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addChatEx([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string name, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string contents) {
            this.Invoke("addChatEx", new object[] {
                        name,
                        contents});
        }
        
        /// <remarks/>
        public void addChatExAsync(string name, string contents) {
            this.addChatExAsync(name, contents, null);
        }
        
        /// <remarks/>
        public void addChatExAsync(string name, string contents, object userState) {
            if ((this.addChatExOperationCompleted == null)) {
                this.addChatExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddChatExOperationCompleted);
            }
            this.InvokeAsync("addChatEx", new object[] {
                        name,
                        contents}, this.addChatExOperationCompleted, userState);
        }
        
        private void OnaddChatExOperationCompleted(object arg) {
            if ((this.addChatExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addChatExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public tournament getTournamentData([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string entryName, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime lastDataTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool lastDataTimeSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime lastChatTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool lastChatTimeSpecified) {
            object[] results = this.Invoke("getTournamentData", new object[] {
                        no,
                        entryName,
                        lastDataTime,
                        lastDataTimeSpecified,
                        lastChatTime,
                        lastChatTimeSpecified});
            return ((tournament)(results[0]));
        }
        
        /// <remarks/>
        public void getTournamentDataAsync(int no, string entryName, System.DateTime lastDataTime, bool lastDataTimeSpecified, System.DateTime lastChatTime, bool lastChatTimeSpecified) {
            this.getTournamentDataAsync(no, entryName, lastDataTime, lastDataTimeSpecified, lastChatTime, lastChatTimeSpecified, null);
        }
        
        /// <remarks/>
        public void getTournamentDataAsync(int no, string entryName, System.DateTime lastDataTime, bool lastDataTimeSpecified, System.DateTime lastChatTime, bool lastChatTimeSpecified, object userState) {
            if ((this.getTournamentDataOperationCompleted == null)) {
                this.getTournamentDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTournamentDataOperationCompleted);
            }
            this.InvokeAsync("getTournamentData", new object[] {
                        no,
                        entryName,
                        lastDataTime,
                        lastDataTimeSpecified,
                        lastChatTime,
                        lastChatTimeSpecified}, this.getTournamentDataOperationCompleted, userState);
        }
        
        private void OngetTournamentDataOperationCompleted(object arg) {
            if ((this.getTournamentDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTournamentDataCompleted(this, new getTournamentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void registerTournament([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int userCount, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int type, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string rank, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string comment) {
            this.Invoke("registerTournament", new object[] {
                        userCount,
                        type,
                        rank,
                        comment});
        }
        
        /// <remarks/>
        public void registerTournamentAsync(int userCount, int type, string rank, string comment) {
            this.registerTournamentAsync(userCount, type, rank, comment, null);
        }
        
        /// <remarks/>
        public void registerTournamentAsync(int userCount, int type, string rank, string comment, object userState) {
            if ((this.registerTournamentOperationCompleted == null)) {
                this.registerTournamentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterTournamentOperationCompleted);
            }
            this.InvokeAsync("registerTournament", new object[] {
                        userCount,
                        type,
                        rank,
                        comment}, this.registerTournamentOperationCompleted, userState);
        }
        
        private void OnregisterTournamentOperationCompleted(object arg) {
            if ((this.registerTournamentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerTournamentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void unregisterTournament() {
            this.Invoke("unregisterTournament", new object[0]);
        }
        
        /// <remarks/>
        public void unregisterTournamentAsync() {
            this.unregisterTournamentAsync(null);
        }
        
        /// <remarks/>
        public void unregisterTournamentAsync(object userState) {
            if ((this.unregisterTournamentOperationCompleted == null)) {
                this.unregisterTournamentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunregisterTournamentOperationCompleted);
            }
            this.InvokeAsync("unregisterTournament", new object[0], this.unregisterTournamentOperationCompleted, userState);
        }
        
        private void OnunregisterTournamentOperationCompleted(object arg) {
            if ((this.unregisterTournamentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unregisterTournamentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addTournamentManager([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id) {
            this.Invoke("addTournamentManager", new object[] {
                        no,
                        id});
        }
        
        /// <remarks/>
        public void addTournamentManagerAsync(int no, string id) {
            this.addTournamentManagerAsync(no, id, null);
        }
        
        /// <remarks/>
        public void addTournamentManagerAsync(int no, string id, object userState) {
            if ((this.addTournamentManagerOperationCompleted == null)) {
                this.addTournamentManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTournamentManagerOperationCompleted);
            }
            this.InvokeAsync("addTournamentManager", new object[] {
                        no,
                        id}, this.addTournamentManagerOperationCompleted, userState);
        }
        
        private void OnaddTournamentManagerOperationCompleted(object arg) {
            if ((this.addTournamentManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTournamentManagerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void removeTournamentManager([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id) {
            this.Invoke("removeTournamentManager", new object[] {
                        no,
                        id});
        }
        
        /// <remarks/>
        public void removeTournamentManagerAsync(int no, string id) {
            this.removeTournamentManagerAsync(no, id, null);
        }
        
        /// <remarks/>
        public void removeTournamentManagerAsync(int no, string id, object userState) {
            if ((this.removeTournamentManagerOperationCompleted == null)) {
                this.removeTournamentManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveTournamentManagerOperationCompleted);
            }
            this.InvokeAsync("removeTournamentManager", new object[] {
                        no,
                        id}, this.removeTournamentManagerOperationCompleted, userState);
        }
        
        private void OnremoveTournamentManagerOperationCompleted(object arg) {
            if ((this.removeTournamentManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeTournamentManagerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addTournamentDummyPlayer([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no) {
            this.Invoke("addTournamentDummyPlayer", new object[] {
                        no});
        }
        
        /// <remarks/>
        public void addTournamentDummyPlayerAsync(int no) {
            this.addTournamentDummyPlayerAsync(no, null);
        }
        
        /// <remarks/>
        public void addTournamentDummyPlayerAsync(int no, object userState) {
            if ((this.addTournamentDummyPlayerOperationCompleted == null)) {
                this.addTournamentDummyPlayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTournamentDummyPlayerOperationCompleted);
            }
            this.InvokeAsync("addTournamentDummyPlayer", new object[] {
                        no}, this.addTournamentDummyPlayerOperationCompleted, userState);
        }
        
        private void OnaddTournamentDummyPlayerOperationCompleted(object arg) {
            if ((this.addTournamentDummyPlayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTournamentDummyPlayerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void cancelTournamentEntryByManager([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id) {
            this.Invoke("cancelTournamentEntryByManager", new object[] {
                        no,
                        id});
        }
        
        /// <remarks/>
        public void cancelTournamentEntryByManagerAsync(int no, string id) {
            this.cancelTournamentEntryByManagerAsync(no, id, null);
        }
        
        /// <remarks/>
        public void cancelTournamentEntryByManagerAsync(int no, string id, object userState) {
            if ((this.cancelTournamentEntryByManagerOperationCompleted == null)) {
                this.cancelTournamentEntryByManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelTournamentEntryByManagerOperationCompleted);
            }
            this.InvokeAsync("cancelTournamentEntryByManager", new object[] {
                        no,
                        id}, this.cancelTournamentEntryByManagerOperationCompleted, userState);
        }
        
        private void OncancelTournamentEntryByManagerOperationCompleted(object arg) {
            if ((this.cancelTournamentEntryByManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelTournamentEntryByManagerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addTournamentSpectator([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id) {
            this.Invoke("addTournamentSpectator", new object[] {
                        no,
                        id});
        }
        
        /// <remarks/>
        public void addTournamentSpectatorAsync(int no, string id) {
            this.addTournamentSpectatorAsync(no, id, null);
        }
        
        /// <remarks/>
        public void addTournamentSpectatorAsync(int no, string id, object userState) {
            if ((this.addTournamentSpectatorOperationCompleted == null)) {
                this.addTournamentSpectatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTournamentSpectatorOperationCompleted);
            }
            this.InvokeAsync("addTournamentSpectator", new object[] {
                        no,
                        id}, this.addTournamentSpectatorOperationCompleted, userState);
        }
        
        private void OnaddTournamentSpectatorOperationCompleted(object arg) {
            if ((this.addTournamentSpectatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTournamentSpectatorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void removeTournamentSpectator([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id) {
            this.Invoke("removeTournamentSpectator", new object[] {
                        no,
                        id});
        }
        
        /// <remarks/>
        public void removeTournamentSpectatorAsync(int no, string id) {
            this.removeTournamentSpectatorAsync(no, id, null);
        }
        
        /// <remarks/>
        public void removeTournamentSpectatorAsync(int no, string id, object userState) {
            if ((this.removeTournamentSpectatorOperationCompleted == null)) {
                this.removeTournamentSpectatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveTournamentSpectatorOperationCompleted);
            }
            this.InvokeAsync("removeTournamentSpectator", new object[] {
                        no,
                        id}, this.removeTournamentSpectatorOperationCompleted, userState);
        }
        
        private void OnremoveTournamentSpectatorOperationCompleted(object arg) {
            if ((this.removeTournamentSpectatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeTournamentSpectatorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setTournamentAnnounces([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute("announces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] announces) {
            this.Invoke("setTournamentAnnounces", new object[] {
                        no,
                        announces});
        }
        
        /// <remarks/>
        public void setTournamentAnnouncesAsync(int no, string[] announces) {
            this.setTournamentAnnouncesAsync(no, announces, null);
        }
        
        /// <remarks/>
        public void setTournamentAnnouncesAsync(int no, string[] announces, object userState) {
            if ((this.setTournamentAnnouncesOperationCompleted == null)) {
                this.setTournamentAnnouncesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTournamentAnnouncesOperationCompleted);
            }
            this.InvokeAsync("setTournamentAnnounces", new object[] {
                        no,
                        announces}, this.setTournamentAnnouncesOperationCompleted, userState);
        }
        
        private void OnsetTournamentAnnouncesOperationCompleted(object arg) {
            if ((this.setTournamentAnnouncesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTournamentAnnouncesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setTournamentUserCount([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int userCount) {
            this.Invoke("setTournamentUserCount", new object[] {
                        no,
                        userCount});
        }
        
        /// <remarks/>
        public void setTournamentUserCountAsync(int no, int userCount) {
            this.setTournamentUserCountAsync(no, userCount, null);
        }
        
        /// <remarks/>
        public void setTournamentUserCountAsync(int no, int userCount, object userState) {
            if ((this.setTournamentUserCountOperationCompleted == null)) {
                this.setTournamentUserCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTournamentUserCountOperationCompleted);
            }
            this.InvokeAsync("setTournamentUserCount", new object[] {
                        no,
                        userCount}, this.setTournamentUserCountOperationCompleted, userState);
        }
        
        private void OnsetTournamentUserCountOperationCompleted(object arg) {
            if ((this.setTournamentUserCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTournamentUserCountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void startTournament([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int minCount, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int maxCount, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool shuffle) {
            this.Invoke("startTournament", new object[] {
                        no,
                        minCount,
                        maxCount,
                        shuffle});
        }
        
        /// <remarks/>
        public void startTournamentAsync(int no, int minCount, int maxCount, bool shuffle) {
            this.startTournamentAsync(no, minCount, maxCount, shuffle, null);
        }
        
        /// <remarks/>
        public void startTournamentAsync(int no, int minCount, int maxCount, bool shuffle, object userState) {
            if ((this.startTournamentOperationCompleted == null)) {
                this.startTournamentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstartTournamentOperationCompleted);
            }
            this.InvokeAsync("startTournament", new object[] {
                        no,
                        minCount,
                        maxCount,
                        shuffle}, this.startTournamentOperationCompleted, userState);
        }
        
        private void OnstartTournamentOperationCompleted(object arg) {
            if ((this.startTournamentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.startTournamentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void retireTournamentByManager([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id) {
            this.Invoke("retireTournamentByManager", new object[] {
                        no,
                        id});
        }
        
        /// <remarks/>
        public void retireTournamentByManagerAsync(int no, string id) {
            this.retireTournamentByManagerAsync(no, id, null);
        }
        
        /// <remarks/>
        public void retireTournamentByManagerAsync(int no, string id, object userState) {
            if ((this.retireTournamentByManagerOperationCompleted == null)) {
                this.retireTournamentByManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretireTournamentByManagerOperationCompleted);
            }
            this.InvokeAsync("retireTournamentByManager", new object[] {
                        no,
                        id}, this.retireTournamentByManagerOperationCompleted, userState);
        }
        
        private void OnretireTournamentByManagerOperationCompleted(object arg) {
            if ((this.retireTournamentByManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retireTournamentByManagerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void kickTournamentUser([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string targetId) {
            this.Invoke("kickTournamentUser", new object[] {
                        no,
                        targetId});
        }
        
        /// <remarks/>
        public void kickTournamentUserAsync(int no, string targetId) {
            this.kickTournamentUserAsync(no, targetId, null);
        }
        
        /// <remarks/>
        public void kickTournamentUserAsync(int no, string targetId, object userState) {
            if ((this.kickTournamentUserOperationCompleted == null)) {
                this.kickTournamentUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnkickTournamentUserOperationCompleted);
            }
            this.InvokeAsync("kickTournamentUser", new object[] {
                        no,
                        targetId}, this.kickTournamentUserOperationCompleted, userState);
        }
        
        private void OnkickTournamentUserOperationCompleted(object arg) {
            if ((this.kickTournamentUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.kickTournamentUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setTournamentResultsByManager([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id, [System.Xml.Serialization.XmlElementAttribute("results", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int[] results) {
            this.Invoke("setTournamentResultsByManager", new object[] {
                        no,
                        id,
                        results});
        }
        
        /// <remarks/>
        public void setTournamentResultsByManagerAsync(int no, string id, int[] results) {
            this.setTournamentResultsByManagerAsync(no, id, results, null);
        }
        
        /// <remarks/>
        public void setTournamentResultsByManagerAsync(int no, string id, int[] results, object userState) {
            if ((this.setTournamentResultsByManagerOperationCompleted == null)) {
                this.setTournamentResultsByManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTournamentResultsByManagerOperationCompleted);
            }
            this.InvokeAsync("setTournamentResultsByManager", new object[] {
                        no,
                        id,
                        results}, this.setTournamentResultsByManagerOperationCompleted, userState);
        }
        
        private void OnsetTournamentResultsByManagerOperationCompleted(object arg) {
            if ((this.setTournamentResultsByManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTournamentResultsByManagerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public id entryTournament([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string entryName, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ip, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int port) {
            object[] results = this.Invoke("entryTournament", new object[] {
                        no,
                        entryName,
                        ip,
                        port});
            return ((id)(results[0]));
        }
        
        /// <remarks/>
        public void entryTournamentAsync(int no, string entryName, string ip, int port) {
            this.entryTournamentAsync(no, entryName, ip, port, null);
        }
        
        /// <remarks/>
        public void entryTournamentAsync(int no, string entryName, string ip, int port, object userState) {
            if ((this.entryTournamentOperationCompleted == null)) {
                this.entryTournamentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentryTournamentOperationCompleted);
            }
            this.InvokeAsync("entryTournament", new object[] {
                        no,
                        entryName,
                        ip,
                        port}, this.entryTournamentOperationCompleted, userState);
        }
        
        private void OnentryTournamentOperationCompleted(object arg) {
            if ((this.entryTournamentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entryTournamentCompleted(this, new entryTournamentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public id guestEntryTournament([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string entryName) {
            object[] results = this.Invoke("guestEntryTournament", new object[] {
                        no,
                        entryName});
            return ((id)(results[0]));
        }
        
        /// <remarks/>
        public void guestEntryTournamentAsync(int no, string entryName) {
            this.guestEntryTournamentAsync(no, entryName, null);
        }
        
        /// <remarks/>
        public void guestEntryTournamentAsync(int no, string entryName, object userState) {
            if ((this.guestEntryTournamentOperationCompleted == null)) {
                this.guestEntryTournamentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnguestEntryTournamentOperationCompleted);
            }
            this.InvokeAsync("guestEntryTournament", new object[] {
                        no,
                        entryName}, this.guestEntryTournamentOperationCompleted, userState);
        }
        
        private void OnguestEntryTournamentOperationCompleted(object arg) {
            if ((this.guestEntryTournamentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.guestEntryTournamentCompleted(this, new guestEntryTournamentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void cancelTournamentEntry([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no) {
            this.Invoke("cancelTournamentEntry", new object[] {
                        no});
        }
        
        /// <remarks/>
        public void cancelTournamentEntryAsync(int no) {
            this.cancelTournamentEntryAsync(no, null);
        }
        
        /// <remarks/>
        public void cancelTournamentEntryAsync(int no, object userState) {
            if ((this.cancelTournamentEntryOperationCompleted == null)) {
                this.cancelTournamentEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelTournamentEntryOperationCompleted);
            }
            this.InvokeAsync("cancelTournamentEntry", new object[] {
                        no}, this.cancelTournamentEntryOperationCompleted, userState);
        }
        
        private void OncancelTournamentEntryOperationCompleted(object arg) {
            if ((this.cancelTournamentEntryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelTournamentEntryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void retireTournament([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no) {
            this.Invoke("retireTournament", new object[] {
                        no});
        }
        
        /// <remarks/>
        public void retireTournamentAsync(int no) {
            this.retireTournamentAsync(no, null);
        }
        
        /// <remarks/>
        public void retireTournamentAsync(int no, object userState) {
            if ((this.retireTournamentOperationCompleted == null)) {
                this.retireTournamentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretireTournamentOperationCompleted);
            }
            this.InvokeAsync("retireTournament", new object[] {
                        no}, this.retireTournamentOperationCompleted, userState);
        }
        
        private void OnretireTournamentOperationCompleted(object arg) {
            if ((this.retireTournamentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retireTournamentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setTournamentPlayerWaiting([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool waiting) {
            this.Invoke("setTournamentPlayerWaiting", new object[] {
                        no,
                        waiting});
        }
        
        /// <remarks/>
        public void setTournamentPlayerWaitingAsync(int no, bool waiting) {
            this.setTournamentPlayerWaitingAsync(no, waiting, null);
        }
        
        /// <remarks/>
        public void setTournamentPlayerWaitingAsync(int no, bool waiting, object userState) {
            if ((this.setTournamentPlayerWaitingOperationCompleted == null)) {
                this.setTournamentPlayerWaitingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTournamentPlayerWaitingOperationCompleted);
            }
            this.InvokeAsync("setTournamentPlayerWaiting", new object[] {
                        no,
                        waiting}, this.setTournamentPlayerWaitingOperationCompleted, userState);
        }
        
        private void OnsetTournamentPlayerWaitingOperationCompleted(object arg) {
            if ((this.setTournamentPlayerWaitingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTournamentPlayerWaitingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setTournamentPlayerFighting([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool fighting) {
            this.Invoke("setTournamentPlayerFighting", new object[] {
                        no,
                        fighting});
        }
        
        /// <remarks/>
        public void setTournamentPlayerFightingAsync(int no, bool fighting) {
            this.setTournamentPlayerFightingAsync(no, fighting, null);
        }
        
        /// <remarks/>
        public void setTournamentPlayerFightingAsync(int no, bool fighting, object userState) {
            if ((this.setTournamentPlayerFightingOperationCompleted == null)) {
                this.setTournamentPlayerFightingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTournamentPlayerFightingOperationCompleted);
            }
            this.InvokeAsync("setTournamentPlayerFighting", new object[] {
                        no,
                        fighting}, this.setTournamentPlayerFightingOperationCompleted, userState);
        }
        
        private void OnsetTournamentPlayerFightingOperationCompleted(object arg) {
            if ((this.setTournamentPlayerFightingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTournamentPlayerFightingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setTournamentResults([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute("results", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int[] results) {
            this.Invoke("setTournamentResults", new object[] {
                        no,
                        results});
        }
        
        /// <remarks/>
        public void setTournamentResultsAsync(int no, int[] results) {
            this.setTournamentResultsAsync(no, results, null);
        }
        
        /// <remarks/>
        public void setTournamentResultsAsync(int no, int[] results, object userState) {
            if ((this.setTournamentResultsOperationCompleted == null)) {
                this.setTournamentResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTournamentResultsOperationCompleted);
            }
            this.InvokeAsync("setTournamentResults", new object[] {
                        no,
                        results}, this.setTournamentResultsOperationCompleted, userState);
        }
        
        private void OnsetTournamentResultsOperationCompleted(object arg) {
            if ((this.setTournamentResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTournamentResultsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addTournamentChat([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int no, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string name, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string contents) {
            this.Invoke("addTournamentChat", new object[] {
                        no,
                        name,
                        contents});
        }
        
        /// <remarks/>
        public void addTournamentChatAsync(int no, string name, string contents) {
            this.addTournamentChatAsync(no, name, contents, null);
        }
        
        /// <remarks/>
        public void addTournamentChatAsync(int no, string name, string contents, object userState) {
            if ((this.addTournamentChatOperationCompleted == null)) {
                this.addTournamentChatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTournamentChatOperationCompleted);
            }
            this.InvokeAsync("addTournamentChat", new object[] {
                        no,
                        name,
                        contents}, this.addTournamentChatOperationCompleted, userState);
        }
        
        private void OnaddTournamentChatOperationCompleted(object arg) {
            if ((this.addTournamentChatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTournamentChatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void registerMatching([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] tencoUser user) {
            this.Invoke("registerMatching", new object[] {
                        user});
        }
        
        /// <remarks/>
        public void registerMatchingAsync(tencoUser user) {
            this.registerMatchingAsync(user, null);
        }
        
        /// <remarks/>
        public void registerMatchingAsync(tencoUser user, object userState) {
            if ((this.registerMatchingOperationCompleted == null)) {
                this.registerMatchingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterMatchingOperationCompleted);
            }
            this.InvokeAsync("registerMatching", new object[] {
                        user}, this.registerMatchingOperationCompleted, userState);
        }
        
        private void OnregisterMatchingOperationCompleted(object arg) {
            if ((this.registerMatchingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerMatchingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void unregisterMatching() {
            this.Invoke("unregisterMatching", new object[0]);
        }
        
        /// <remarks/>
        public void unregisterMatchingAsync() {
            this.unregisterMatchingAsync(null);
        }
        
        /// <remarks/>
        public void unregisterMatchingAsync(object userState) {
            if ((this.unregisterMatchingOperationCompleted == null)) {
                this.unregisterMatchingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunregisterMatchingOperationCompleted);
            }
            this.InvokeAsync("unregisterMatching", new object[0], this.unregisterMatchingOperationCompleted, userState);
        }
        
        private void OnunregisterMatchingOperationCompleted(object arg) {
            if ((this.unregisterMatchingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unregisterMatchingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addMatchingHistory([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] id oponent) {
            this.Invoke("addMatchingHistory", new object[] {
                        oponent});
        }
        
        /// <remarks/>
        public void addMatchingHistoryAsync(id oponent) {
            this.addMatchingHistoryAsync(oponent, null);
        }
        
        /// <remarks/>
        public void addMatchingHistoryAsync(id oponent, object userState) {
            if ((this.addMatchingHistoryOperationCompleted == null)) {
                this.addMatchingHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMatchingHistoryOperationCompleted);
            }
            this.InvokeAsync("addMatchingHistory", new object[] {
                        oponent}, this.addMatchingHistoryOperationCompleted, userState);
        }
        
        private void OnaddMatchingHistoryOperationCompleted(object arg) {
            if ((this.addMatchingHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMatchingHistoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setPrepared([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] id oponent) {
            this.Invoke("setPrepared", new object[] {
                        oponent});
        }
        
        /// <remarks/>
        public void setPreparedAsync(id oponent) {
            this.setPreparedAsync(oponent, null);
        }
        
        /// <remarks/>
        public void setPreparedAsync(id oponent, object userState) {
            if ((this.setPreparedOperationCompleted == null)) {
                this.setPreparedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPreparedOperationCompleted);
            }
            this.InvokeAsync("setPrepared", new object[] {
                        oponent}, this.setPreparedOperationCompleted, userState);
        }
        
        private void OnsetPreparedOperationCompleted(object arg) {
            if ((this.setPreparedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPreparedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void skipMatching([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] id oponent) {
            this.Invoke("skipMatching", new object[] {
                        oponent});
        }
        
        /// <remarks/>
        public void skipMatchingAsync(id oponent) {
            this.skipMatchingAsync(oponent, null);
        }
        
        /// <remarks/>
        public void skipMatchingAsync(id oponent, object userState) {
            if ((this.skipMatchingOperationCompleted == null)) {
                this.skipMatchingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnskipMatchingOperationCompleted);
            }
            this.InvokeAsync("skipMatching", new object[] {
                        oponent}, this.skipMatchingOperationCompleted, userState);
        }
        
        private void OnskipMatchingOperationCompleted(object arg) {
            if ((this.skipMatchingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.skipMatchingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public matchingResult getMatchingResult() {
            object[] results = this.Invoke("getMatchingResult", new object[0]);
            return ((matchingResult)(results[0]));
        }
        
        /// <remarks/>
        public void getMatchingResultAsync() {
            this.getMatchingResultAsync(null);
        }
        
        /// <remarks/>
        public void getMatchingResultAsync(object userState) {
            if ((this.getMatchingResultOperationCompleted == null)) {
                this.getMatchingResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMatchingResultOperationCompleted);
            }
            this.InvokeAsync("getMatchingResult", new object[0], this.getMatchingResultOperationCompleted, userState);
        }
        
        private void OngetMatchingResultOperationCompleted(object arg) {
            if ((this.getMatchingResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMatchingResultCompleted(this, new getMatchingResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public allData getAllDataEx([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool getHost, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime lastHostTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool lastHostTimeSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool getChat, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime lastChatTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool lastChatTimeSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool getTournament, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime lastTournamentTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool lastTournamentTimeSpecified) {
            object[] results = this.Invoke("getAllDataEx", new object[] {
                        getHost,
                        lastHostTime,
                        lastHostTimeSpecified,
                        getChat,
                        lastChatTime,
                        lastChatTimeSpecified,
                        getTournament,
                        lastTournamentTime,
                        lastTournamentTimeSpecified});
            return ((allData)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDataExAsync(bool getHost, System.DateTime lastHostTime, bool lastHostTimeSpecified, bool getChat, System.DateTime lastChatTime, bool lastChatTimeSpecified, bool getTournament, System.DateTime lastTournamentTime, bool lastTournamentTimeSpecified) {
            this.getAllDataExAsync(getHost, lastHostTime, lastHostTimeSpecified, getChat, lastChatTime, lastChatTimeSpecified, getTournament, lastTournamentTime, lastTournamentTimeSpecified, null);
        }
        
        /// <remarks/>
        public void getAllDataExAsync(bool getHost, System.DateTime lastHostTime, bool lastHostTimeSpecified, bool getChat, System.DateTime lastChatTime, bool lastChatTimeSpecified, bool getTournament, System.DateTime lastTournamentTime, bool lastTournamentTimeSpecified, object userState) {
            if ((this.getAllDataExOperationCompleted == null)) {
                this.getAllDataExOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDataExOperationCompleted);
            }
            this.InvokeAsync("getAllDataEx", new object[] {
                        getHost,
                        lastHostTime,
                        lastHostTimeSpecified,
                        getChat,
                        lastChatTime,
                        lastChatTimeSpecified,
                        getTournament,
                        lastTournamentTime,
                        lastTournamentTimeSpecified}, this.getAllDataExOperationCompleted, userState);
        }
        
        private void OngetAllDataExOperationCompleted(object arg) {
            if ((this.getAllDataExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDataExCompleted(this, new getAllDataExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", ResponseNamespace="http://hisoutenAddressService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public allData getAllData([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool getHost, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool getChat, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime lastHostTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool lastHostTimeSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime lastChatTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool lastChatTimeSpecified) {
            object[] results = this.Invoke("getAllData", new object[] {
                        getHost,
                        getChat,
                        lastHostTime,
                        lastHostTimeSpecified,
                        lastChatTime,
                        lastChatTimeSpecified});
            return ((allData)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDataAsync(bool getHost, bool getChat, System.DateTime lastHostTime, bool lastHostTimeSpecified, System.DateTime lastChatTime, bool lastChatTimeSpecified) {
            this.getAllDataAsync(getHost, getChat, lastHostTime, lastHostTimeSpecified, lastChatTime, lastChatTimeSpecified, null);
        }
        
        /// <remarks/>
        public void getAllDataAsync(bool getHost, bool getChat, System.DateTime lastHostTime, bool lastHostTimeSpecified, System.DateTime lastChatTime, bool lastChatTimeSpecified, object userState) {
            if ((this.getAllDataOperationCompleted == null)) {
                this.getAllDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDataOperationCompleted);
            }
            this.InvokeAsync("getAllData", new object[] {
                        getHost,
                        getChat,
                        lastHostTime,
                        lastHostTimeSpecified,
                        lastChatTime,
                        lastChatTimeSpecified}, this.getAllDataOperationCompleted, userState);
        }
        
        private void OngetAllDataOperationCompleted(object arg) {
            if ((this.getAllDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDataCompleted(this, new getAllDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://hisoutenAddressService/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void leave() {
            this.Invoke("leave", new object[0]);
        }
        
        /// <remarks/>
        public void leaveAsync() {
            this.leaveAsync(null);
        }
        
        /// <remarks/>
        public void leaveAsync(object userState) {
            if ((this.leaveOperationCompleted == null)) {
                this.leaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnleaveOperationCompleted);
            }
            this.InvokeAsync("leave", new object[0], this.leaveOperationCompleted, userState);
        }
        
        private void OnleaveOperationCompleted(object arg) {
            if ((this.leaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.leaveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class serverSetting {
        
        private int chatMaxLengthField;
        
        private int commentMaxLengthField;
        
        private bool enableAutoMatchingField;
        
        private bool enableChatField;
        
        private bool enableChatPrefixField;
        
        private bool enableTournamentField;
        
        private string[] gameInformationsField;
        
        private string hisoutenClassNameField;
        
        private string hisoutenFightingScenesField;
        
        private string hisoutenSceneIdAddressField;
        
        private string hisoutenWindowCaptionField;
        
        private int rankMaxLengthField;
        
        private int tournamentMaxMinutesField;
        
        private int tournamentMaxUsersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int chatMaxLength {
            get {
                return this.chatMaxLengthField;
            }
            set {
                this.chatMaxLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int commentMaxLength {
            get {
                return this.commentMaxLengthField;
            }
            set {
                this.commentMaxLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool enableAutoMatching {
            get {
                return this.enableAutoMatchingField;
            }
            set {
                this.enableAutoMatchingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool enableChat {
            get {
                return this.enableChatField;
            }
            set {
                this.enableChatField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool enableChatPrefix {
            get {
                return this.enableChatPrefixField;
            }
            set {
                this.enableChatPrefixField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool enableTournament {
            get {
                return this.enableTournamentField;
            }
            set {
                this.enableTournamentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("gameInformations", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string[] gameInformations {
            get {
                return this.gameInformationsField;
            }
            set {
                this.gameInformationsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string hisoutenClassName {
            get {
                return this.hisoutenClassNameField;
            }
            set {
                this.hisoutenClassNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string hisoutenFightingScenes {
            get {
                return this.hisoutenFightingScenesField;
            }
            set {
                this.hisoutenFightingScenesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string hisoutenSceneIdAddress {
            get {
                return this.hisoutenSceneIdAddressField;
            }
            set {
                this.hisoutenSceneIdAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string hisoutenWindowCaption {
            get {
                return this.hisoutenWindowCaptionField;
            }
            set {
                this.hisoutenWindowCaptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int rankMaxLength {
            get {
                return this.rankMaxLengthField;
            }
            set {
                this.rankMaxLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int tournamentMaxMinutes {
            get {
                return this.tournamentMaxMinutesField;
            }
            set {
                this.tournamentMaxMinutesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int tournamentMaxUsers {
            get {
                return this.tournamentMaxUsersField;
            }
            set {
                this.tournamentMaxUsersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class tournamentInformation {
        
        private int noField;
        
        private id idField;
        
        private System.DateTime timeField;
        
        private bool timeFieldSpecified;
        
        private int typeField;
        
        private int userCountField;
        
        private int playersCountField;
        
        private string rankField;
        
        private string commentField;
        
        private bool startedField;
        
        private bool deletedField;
        
        private System.DateTime lastUpdateField;
        
        private bool lastUpdateFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int No {
            get {
                return this.noField;
            }
            set {
                this.noField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public id Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSpecified {
            get {
                return this.timeFieldSpecified;
            }
            set {
                this.timeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int UserCount {
            get {
                return this.userCountField;
            }
            set {
                this.userCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int PlayersCount {
            get {
                return this.playersCountField;
            }
            set {
                this.playersCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Started {
            get {
                return this.startedField;
            }
            set {
                this.startedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime LastUpdate {
            get {
                return this.lastUpdateField;
            }
            set {
                this.lastUpdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastUpdateSpecified {
            get {
                return this.lastUpdateFieldSpecified;
            }
            set {
                this.lastUpdateFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class id {
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class allData {
        
        private int userCountField;
        
        private string[] announcesField;
        
        private host[] hostsField;
        
        private bool getHostField;
        
        private chat[] chatsField;
        
        private bool getChatField;
        
        private tournamentInformation[] tournamentsField;
        
        private bool getTournamentField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int UserCount {
            get {
                return this.userCountField;
            }
            set {
                this.userCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Announces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string[] Announces {
            get {
                return this.announcesField;
            }
            set {
                this.announcesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Hosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public host[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool GetHost {
            get {
                return this.getHostField;
            }
            set {
                this.getHostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Chats", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public chat[] Chats {
            get {
                return this.chatsField;
            }
            set {
                this.chatsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool GetChat {
            get {
                return this.getChatField;
            }
            set {
                this.getChatField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Tournaments", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public tournamentInformation[] Tournaments {
            get {
                return this.tournamentsField;
            }
            set {
                this.tournamentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool GetTournament {
            get {
                return this.getTournamentField;
            }
            set {
                this.getTournamentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class host {
        
        private int noField;
        
        private id idField;
        
        private System.DateTime timeField;
        
        private bool timeFieldSpecified;
        
        private string ipField;
        
        private int portField;
        
        private string rankField;
        
        private string commentField;
        
        private bool isFightingField;
        
        private bool isDeletedField;
        
        private System.DateTime lastUpdateField;
        
        private bool lastUpdateFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int No {
            get {
                return this.noField;
            }
            set {
                this.noField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public id Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSpecified {
            get {
                return this.timeFieldSpecified;
            }
            set {
                this.timeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Ip {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsFighting {
            get {
                return this.isFightingField;
            }
            set {
                this.isFightingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime lastUpdate {
            get {
                return this.lastUpdateField;
            }
            set {
                this.lastUpdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastUpdateSpecified {
            get {
                return this.lastUpdateFieldSpecified;
            }
            set {
                this.lastUpdateFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class chat {
        
        private System.DateTime timeField;
        
        private bool timeFieldSpecified;
        
        private id idField;
        
        private string nameField;
        
        private string contentsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSpecified {
            get {
                return this.timeFieldSpecified;
            }
            set {
                this.timeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public id Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Contents {
            get {
                return this.contentsField;
            }
            set {
                this.contentsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class matchingResult {
        
        private tencoUser hostField;
        
        private tencoUser clientField;
        
        private bool clientPreparedField;
        
        private bool hostPreparedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public tencoUser Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public tencoUser Client {
            get {
                return this.clientField;
            }
            set {
                this.clientField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool clientPrepared {
            get {
                return this.clientPreparedField;
            }
            set {
                this.clientPreparedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool hostPrepared {
            get {
                return this.hostPreparedField;
            }
            set {
                this.hostPreparedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class tencoUser : user {
        
        private string accountNameField;
        
        private bool isHostableField;
        
        private bool isRoomOnlyField;
        
        private string ipField;
        
        private int portField;
        
        private string commentField;
        
        private tencoRating ratingField;
        
        private int matchingSpanField;
        
        private bool unregisteredField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AccountName {
            get {
                return this.accountNameField;
            }
            set {
                this.accountNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsHostable {
            get {
                return this.isHostableField;
            }
            set {
                this.isHostableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsRoomOnly {
            get {
                return this.isRoomOnlyField;
            }
            set {
                this.isRoomOnlyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Ip {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public tencoRating Rating {
            get {
                return this.ratingField;
            }
            set {
                this.ratingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int MatchingSpan {
            get {
                return this.matchingSpanField;
            }
            set {
                this.matchingSpanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool unregistered {
            get {
                return this.unregisteredField;
            }
            set {
                this.unregisteredField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class tencoRating {
        
        private th135Characters characterField;
        
        private int valueField;
        
        private int deviationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public th135Characters Character {
            get {
                return this.characterField;
            }
            set {
                this.characterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Deviation {
            get {
                return this.deviationField;
            }
            set {
                this.deviationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class th135Characters {
        
        private int valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tencoUser))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class user {
        
        private id idField;
        
        private System.DateTime timeField;
        
        private bool timeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public id Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSpecified {
            get {
                return this.timeFieldSpecified;
            }
            set {
                this.timeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(guest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(spectator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(player))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(manager))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class tournamentUser {
        
        private id idField;
        
        private string entryNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public id Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string entryName {
            get {
                return this.entryNameField;
            }
            set {
                this.entryNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class guest : tournamentUser {
        
        private System.DateTime lastAccessTimeField;
        
        private bool lastAccessTimeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime lastAccessTime {
            get {
                return this.lastAccessTimeField;
            }
            set {
                this.lastAccessTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastAccessTimeSpecified {
            get {
                return this.lastAccessTimeFieldSpecified;
            }
            set {
                this.lastAccessTimeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class spectator : tournamentUser {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class player : tournamentUser {
        
        private System.Nullable<int>[] matchResultsField;
        
        private int entryNoField;
        
        private bool fightingField;
        
        private string ipField;
        
        private int portField;
        
        private bool retiredField;
        
        private bool waitingField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MatchResults", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int>[] MatchResults {
            get {
                return this.matchResultsField;
            }
            set {
                this.matchResultsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int entryNo {
            get {
                return this.entryNoField;
            }
            set {
                this.entryNoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool fighting {
            get {
                return this.fightingField;
            }
            set {
                this.fightingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ip {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool retired {
            get {
                return this.retiredField;
            }
            set {
                this.retiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool waiting {
            get {
                return this.waitingField;
            }
            set {
                this.waitingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class manager : tournamentUser {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hisoutenAddressService/")]
    public partial class tournament {
        
        private int noField;
        
        private id registeredIdField;
        
        private System.DateTime timeField;
        
        private bool timeFieldSpecified;
        
        private int typeField;
        
        private string rankField;
        
        private string commentField;
        
        private string[] announcesField;
        
        private manager[] managersField;
        
        private player[] playersField;
        
        private spectator[] spectatorsField;
        
        private guest[] guestsField;
        
        private id[] kickedIdsField;
        
        private chat[] chatsField;
        
        private bool deletedField;
        
        private System.DateTime lastChatUpdateField;
        
        private bool lastChatUpdateFieldSpecified;
        
        private System.DateTime lastDataUpdateField;
        
        private bool lastDataUpdateFieldSpecified;
        
        private bool startedField;
        
        private int userCountField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int No {
            get {
                return this.noField;
            }
            set {
                this.noField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public id RegisteredId {
            get {
                return this.registeredIdField;
            }
            set {
                this.registeredIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSpecified {
            get {
                return this.timeFieldSpecified;
            }
            set {
                this.timeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Announces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string[] Announces {
            get {
                return this.announcesField;
            }
            set {
                this.announcesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Managers", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public manager[] Managers {
            get {
                return this.managersField;
            }
            set {
                this.managersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Players", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public player[] Players {
            get {
                return this.playersField;
            }
            set {
                this.playersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Spectators", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public spectator[] Spectators {
            get {
                return this.spectatorsField;
            }
            set {
                this.spectatorsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Guests", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public guest[] Guests {
            get {
                return this.guestsField;
            }
            set {
                this.guestsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("KickedIds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public id[] KickedIds {
            get {
                return this.kickedIdsField;
            }
            set {
                this.kickedIdsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Chats", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public chat[] Chats {
            get {
                return this.chatsField;
            }
            set {
                this.chatsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime lastChatUpdate {
            get {
                return this.lastChatUpdateField;
            }
            set {
                this.lastChatUpdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastChatUpdateSpecified {
            get {
                return this.lastChatUpdateFieldSpecified;
            }
            set {
                this.lastChatUpdateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime lastDataUpdate {
            get {
                return this.lastDataUpdateField;
            }
            set {
                this.lastDataUpdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastDataUpdateSpecified {
            get {
                return this.lastDataUpdateFieldSpecified;
            }
            set {
                this.lastDataUpdateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool started {
            get {
                return this.startedField;
            }
            set {
                this.startedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int userCount {
            get {
                return this.userCountField;
            }
            set {
                this.userCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void registerHostCompletedEventHandler(object sender, registerHostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void unregisterHostCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServerVersionCompletedEventHandler(object sender, getServerVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServerSettingCompletedEventHandler(object sender, getServerSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public serverSetting Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((serverSetting)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServerSettingsCompletedEventHandler(object sender, getServerSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void clearHostsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void clearTournamentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void clearChatCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAnnouncesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addAnnounceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeAnnounceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void clearAnnounceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void forceRegisterHostCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void forceRegisterHostExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void forceUnregisterHostCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void forceUnregisterTournamentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void forceSetFightingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addAdminChatCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAddressByIdCompletedEventHandler(object sender, getAddressByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAddressByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAddressByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setEnableRemoteAdminCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getUserCountCompletedEventHandler(object sender, getUserCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void enterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void registerHostInformationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void registerHostExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setFightingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addChatCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addChatExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getTournamentDataCompletedEventHandler(object sender, getTournamentDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTournamentDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTournamentDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public tournament Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((tournament)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void registerTournamentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void unregisterTournamentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addTournamentManagerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeTournamentManagerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addTournamentDummyPlayerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void cancelTournamentEntryByManagerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addTournamentSpectatorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeTournamentSpectatorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setTournamentAnnouncesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setTournamentUserCountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void startTournamentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void retireTournamentByManagerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void kickTournamentUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setTournamentResultsByManagerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void entryTournamentCompletedEventHandler(object sender, entryTournamentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entryTournamentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entryTournamentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public id Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((id)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void guestEntryTournamentCompletedEventHandler(object sender, guestEntryTournamentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class guestEntryTournamentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal guestEntryTournamentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public id Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((id)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void cancelTournamentEntryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void retireTournamentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setTournamentPlayerWaitingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setTournamentPlayerFightingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setTournamentResultsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addTournamentChatCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void registerMatchingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void unregisterMatchingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addMatchingHistoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPreparedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void skipMatchingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMatchingResultCompletedEventHandler(object sender, getMatchingResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMatchingResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMatchingResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public matchingResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((matchingResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAllDataExCompletedEventHandler(object sender, getAllDataExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDataExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDataExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public allData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((allData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAllDataCompletedEventHandler(object sender, getAllDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public allData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((allData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void leaveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591